"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RCON = void 0;
const events_1 = require("events");
const resolveSRV_1 = __importDefault(require("../util/resolveSRV"));
const TCPSocket_1 = __importDefault(require("./TCPSocket"));
const Packet_1 = __importDefault(require("./Packet"));
const ipAddressRegEx = /^\d{1,3}(\.\d{1,3}){3}$/;
function applyDefaultOptions(options) {
    return Object.assign({
        port: 25575,
        password: '',
        connectTimeout: 1000 * 15,
        enableSRV: true
    }, options);
}
class RCON extends events_1.EventEmitter {
    constructor(host, options) {
        super();
        this.socket = null;
        const opts = applyDefaultOptions(options);
        this.host = host;
        this.isLoggedIn = false;
        this.options = opts;
        this.requestID = 0;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            let srvRecord = null;
            if (this.options.enableSRV && !ipAddressRegEx.test(this.host)) {
                srvRecord = yield resolveSRV_1.default(this.host);
                if (srvRecord) {
                    this.options.port = srvRecord.port;
                }
            }
            this.socket = yield TCPSocket_1.default.connect(this.host, this.options.port, this.options.connectTimeout);
            {
                const loginPacket = new Packet_1.default();
                loginPacket.writeIntLE(10 + this.options.password.length);
                loginPacket.writeIntLE(++this.requestID);
                loginPacket.writeIntLE(3);
                loginPacket.writeString(this.options.password, false);
                loginPacket.writeByte(0x00, 0x00);
                yield this.socket.writePacket(loginPacket, false);
            }
            {
                const length = yield this.socket.readIntLE();
                const requestID = yield this.socket.readIntLE();
                yield this.socket.readIntLE();
                if (requestID === -1) {
                    throw new Error('Failed to connect to RCON, invalid password');
                }
                yield this.socket.readBytes(length - 8);
                this.isLoggedIn = true;
            }
            process.nextTick(() => __awaiter(this, void 0, void 0, function* () {
                while (this.socket !== null) {
                    const length = yield this.socket.readIntLE();
                    yield this.socket.readIntLE();
                    const packetType = yield this.socket.readIntLE();
                    if (packetType === 0) {
                        let output = '';
                        if (length > 10) {
                            output = String.fromCodePoint(...yield this.socket.readBytes(length - 10));
                        }
                        this.emit('output', output);
                        yield this.socket.readBytes(2);
                    }
                    else {
                        yield this.socket.readBytes(length - 8);
                    }
                }
            }));
        });
    }
    run(command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket === null || this.socket.socket.connecting) {
                throw new Error('Socket has not connected yet, please run RCON#connect()');
            }
            if (!this.isLoggedIn) {
                throw new Error('Client is not logged in or login was unsuccessful, please run RCON#connect()');
            }
            const commandPacket = new Packet_1.default();
            commandPacket.writeIntLE(10 + command.length);
            commandPacket.writeIntLE(++this.requestID);
            commandPacket.writeIntLE(2);
            commandPacket.writeString(command, false);
            commandPacket.writeByte(0x00, 0x00);
            return this.socket.writePacket(commandPacket, false);
        });
    }
    close() {
        if (this.socket === null) {
            throw new Error('Socket is already closed');
        }
        return this.socket.destroy();
    }
}
exports.RCON = RCON;
